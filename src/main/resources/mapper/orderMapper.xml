<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fisa.tick3t.repository.OrderRepository">

    <!-- [myorder] 내 예매내역 조회(결제 상태 및 검색)    -->
    <select id="selectOrders" parameterType="Map" resultType="OrderDto">
        SELECT
        row_number() over (ORDER BY resv_dtm) as rowNum,
        TM.reservation_id as ticketId,
        CM.cncr_title as title,
        CM.cncr_dtm as datetime,
        (select hall_loc from TCK_HALL_M where TCK_HALL_M.hall_id = TM.hall_id) as location,
        (select hall_name from TCK_HALL_M where TCK_HALL_M.hall_id = TM.hall_id) as hallName,
        TM.ticket_status_cd as payState
        FROM CNCR_TICKET_M TM
        JOIN TCK_CONCERT_M CM
        on CM.concert_id = TM.concert_id
        WHERE customer_id = #{userId}
        <if test="queryStringDto.category != null and queryStringDto.category != '4'">
            AND TM.ticket_status_cd = #{queryStringDto.category}
        </if>
        <if test="queryStringDto.word != null">
            AND CM.cncr_title LIKE CONCAT('%',#{queryStringDto.word}, '%')
        </if>
        ORDER BY resv_dtm
        LIMIT ${@com.fisa.tick3t.global.Constants@concertPageSize} OFFSET #{queryStringDto.offset}
    </select>


    <!-- [myorder/id 내 예매내역 상세 조회 -->
    <select id="selectOrder" parameterType="Map" resultType="OrderDto">
        SELECT TM.reservation_id                                                       as ticketId,
               CM.concert_id                                                           as concertId,
               CM.cncr_title                                                           as title,
               (select hall_loc from TCK_HALL_M where TCK_HALL_M.hall_id = TM.hall_id) as location,
               (select hall_name from TCK_HALL_M where TCK_HALL_M.hall_id = TM.hall_id) as hallName,
               CM.cncr_dtm                                                             as datetime,
               TM.seat_no                                                              as seat,
               TM.ticket_price                                                          as price,
               CM.cncr_cancel_date                                                     as cancelDate,
               TM.ticket_status_cd                                                      as payState,
               TM.pay_dtm                                                               as payDtm
        FROM CNCR_TICKET_M TM
                 JOIN TCK_CONCERT_M CM
                      on CM.concert_id = TM.concert_id
        WHERE customer_id = #{userId}
          and TM.reservation_id = #{concertId}
    </select>


    <!-- [myorder/pay] 내 예매내역 결제하기 -->
    <update id="payOrder" parameterType="Map">
        UPDATE CNCR_TICKET_M
        SET ticket_status_cd = 1
        WHERE customer_id = #{userId}
          AND reservation_id = #{ticketId}
          AND ticket_status_cd = 0
    </update>

    <update id="cancelOrder" parameterType="Map">
        UPDATE CNCR_TICKET_M
        SET ticket_status_cd =
            <choose>
                <when test="payState = 0">
                    2
                </when>
                <otherwise>
                    3
                </otherwise>
            </choose>
        WHERE customer_id = #{userId}
          AND reservation_id = #{ticketId}
    </update>

    <update id="cancelOrders">
        UPDATE CNCR_TICKET_M
        SET ticket_status_cd = 2
        WHERE ticket_status_cd = 0
        AND pay_dtm &lt; CURRENT_TIMESTAMP
    </update>


    <select id="selectOrderNum" parameterType="Map" resultType="int">
        SELECT count(*) as totalElement
        FROM CNCR_TICKET_M
        WHERE customer_id = #{userId}
        <if test="queryStringDto.category != null and queryStringDto.category != '4'">
            AND ticket_status_cd = #{queryStringDto.category}
        </if>
        <if test="queryStringDto.word != null">
            AND (SELECT cncr_title
                 FROM TCK_CONCERT_M
                 WHERE TCK_CONCERT_M.concert_id = CNCR_TICKET_M.concert_id)
            LIKE CONCAT('%',#{queryStringDto.word}, '%')
        </if>
    </select>



    <!-- [/order] 조건에 맞을 경우 예매하기 -->
    <insert id="selectSeat" parameterType="ReservationDto">
        <selectKey resultType="int" keyProperty="canReserve" order="BEFORE" >
            SELECT CASE
                WHEN COUNT(*) > 0 THEN 1
                ELSE 0
                END AS is_valid
            FROM tck_concert_m AS tm
            JOIN tck_user_m AS um ON tm.fan_cd = um.fan_cd
            LEFT JOIN (
                SELECT *
                    FROM CNCR_TICKET_M
                    WHERE ticket_status_cd = 0 OR ticket_status_cd = 1
                ) AS ctm ON tm.concert_id = ctm.concert_id AND um.user_id = ctm.customer_id
            WHERE tm.concert_id = #{concertId}
                AND um.user_id = #{userId}
                AND ctm.concert_id IS NULL;
        </selectKey>
        <if test="canReserve == 1">
            INSERT INTO CNCR_TICKET_M (customer_id, concert_id, grade_id, ticket_price, ticket_status_cd,
                                       seat_no,
                                       hall_id,
                                       pay_dtm)
            VALUES                    (#{userId}, #{concertId}, #{gradeId},#{price}, 0,
                                      (SELECT MIN(a.seat_no + 1) AS next_available_seat
                                        FROM (
                                            SELECT seat_no
                                            FROM CNCR_TICKET_M
                                            WHERE concert_id = #{concertId} AND grade_id = #{gradeId}
                                        UNION ALL
                                            SELECT 0
                                        UNION ALL
                                            SELECT #{totalSeat})
                                        AS a LEFT JOIN CNCR_TICKET_M AS b ON a.seat_no + 1 = b.seat_no
                                        AND b.concert_id = #{concertId}
                                        AND b.grade_id = #{gradeId}
                                        WHERE a.seat_no &lt; #{totalSeat} AND b.seat_no IS NULL
                                        LIMIT 1),
            (select hall_id from TCK_CONCERT_M where TCK_CONCERT_M.concert_id = #{concertId}),
            DATE_ADD(NOW(), INTERVAL 1 DAY))
        </if>
    </insert>

    <!-- [checkOrder] 예매 내역이 있는지 체크-->
    <select id="checkReservation" parameterType="Map" resultType="int">
        SELECT count(*)
        FROM CNCR_TICKET_M
        WHERE concert_id = #{ticketId} AND customer_id = #{userId}
        AND (ticket_status_cd = 0 or ticket_status_cd = 1)
    </select>

    <!-- [checkOrder] 팬인지  체크-->
    <select id="checkFanCd" parameterType="Map" resultType="int">
        SELECT count(tm.fan_cd)
        FROM tck_concert_m as tm JOIN tck_user_m AS um
                                  ON tm.fan_cd = um.fan_cd
        WHERE tm.concert_id = #{ticketId} AND um.user_id = #{userId}
    </select>

    <!-- [checkOrder] 팬인지  체크 -->
    <select id="checkTime">
        select count(*)
        From TCK_CONCERT_M
        where cncr_start_dtm &lt; now() and concert_id = #{concert_id}
    </select>

    <!-- [price] -->
    <select id="priceCheck">
        (select cncr_price from TCK_CONCERT_M where concert_id = #{concertId})
    </select>

</mapper>