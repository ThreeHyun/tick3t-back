<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fisa.tick3t.repository.OrderRepository">

    <!-- [myorder] 내 예매내역 조회(결제 상태 및 검색)    -->
    <select id="selectOrders" parameterType="Map" resultType="OrderDto">
        SELECT
        row_number() over (ORDER BY resv_dtm) as rowNum,
        TM.reservation_id as ticketId,
        CM.cncr_title as title,
        CM.cncr_dtm as datetime,
        (select hall_loc from TCK_HALL_M where TCK_HALL_M.hall_id = TM.hall_id) as location,
        (select hall_name from TCK_HALL_M where TCK_HALL_M.hall_id = TM.hall_id) as hallName,
        TM.ticket_status_cd as payState,
        CM.cncr_img_url as imgUrl
        FROM CNCR_TICKET_M TM
        JOIN TCK_CONCERT_M CM
        on CM.concert_id = TM.concert_id
        WHERE customer_id = #{userId}
        <if test="queryStringDto.category != null and queryStringDto.category != '4'">
            AND TM.ticket_status_cd = #{queryStringDto.category}
        </if>
        <if test="queryStringDto.word != null">
            AND CM.cncr_title LIKE CONCAT('%',#{queryStringDto.word}, '%')
        </if>
        ORDER BY resv_dtm ASC
        LIMIT ${@com.fisa.tick3t.global.Constants@orderPageSize} OFFSET #{queryStringDto.offset}
    </select>


    <!-- [myorder/id 내 예매내역 상세 조회 -->
    <select id="selectOrder" parameterType="Map" resultType="OrderDto">
        SELECT TM.reservation_id                                                        as ticketId,
               CM.concert_id                                                            as concertId,
               CM.cncr_title                                                            as title,
               (select hall_loc from TCK_HALL_M where TCK_HALL_M.hall_id = TM.hall_id)  as location,
               (select hall_name from TCK_HALL_M where TCK_HALL_M.hall_id = TM.hall_id) as hallName,
               CM.cncr_dtm                                                              as datetime,
               TM.seat_no                                                               as seat,
               (select grade_name from TCK_HALL_SEAT_M where TCK_HALL_SEAT_M.grade_id = TM.grade_id) as grade,
               CM.cncr_price                                                         as price,
               CM.cncr_cancel_date                                                      as cancelDate,
               TM.ticket_status_cd                                                      as payState,
               TM.pay_dtm                                                               as payDtm,
               CM.cncr_img_url                                                          as imgUrl
        FROM CNCR_TICKET_M TM
                 JOIN TCK_CONCERT_M CM
                      on CM.concert_id = TM.concert_id
        WHERE customer_id = #{userId}
          and TM.reservation_id = #{concertId}
    </select>


    <!-- [myorder/pay] 내 예매내역 결제하기 -->
    <update id="payOrder" parameterType="Map">
        UPDATE CNCR_TICKET_M
        SET ticket_status_cd = 1
        WHERE customer_id = #{userId}
          AND reservation_id = #{ticketId}
          AND ticket_status_cd = 0
    </update>

    <update id="cancelOrder" parameterType="Map">
        UPDATE CNCR_TICKET_M
        SET ticket_status_cd = CASE
                                   WHEN ticket_status_cd = 0 THEN 2
                                   ELSE 3
            END
        WHERE customer_id = #{userId}
          AND reservation_id = #{ticketId}
    </update>

    <select id="cancelOrderTime" parameterType="int" resultType="Integer">
        SELECT CASE
                   WHEN cncr_cancel_date >= NOW() THEN 1
                   ELSE 0
                   END
        FROM TCK_CONCERT_M
        WHERE concert_id =
              (SELECT concert_id
               FROM CNCR_TICKET_M
               WHERE reservation_id = #{ticket_id})
    </select>

    <select id="payOrderTime" parameterType="Map" resultType="Integer">
        SELECT CASE
                   WHEN pay_dtm >= NOW() THEN 1
                   ELSE 0
                   END
        FROM CNCR_TICKET_M
        WHERE reservation_id = #{ticketId} AND customer_id = #{userId}
    </select>




    <update id="cancelOrders">
        UPDATE CNCR_TICKET_M
        SET ticket_status_cd = 2
        WHERE ticket_status_cd = 0
          AND pay_dtm &lt; CURRENT_TIMESTAMP
    </update>


    <select id="selectOrderNum" parameterType="Map" resultType="int">
        SELECT count(*) as totalElement
        FROM CNCR_TICKET_M
        WHERE customer_id = #{userId}
        <if test="queryStringDto.category != null and queryStringDto.category != '4'">
            AND ticket_status_cd = #{queryStringDto.category}
        </if>
        <if test="queryStringDto.word != null">
            AND (SELECT cncr_title
            FROM TCK_CONCERT_M
            WHERE TCK_CONCERT_M.concert_id = CNCR_TICKET_M.concert_id)
            LIKE CONCAT('%',#{queryStringDto.word}, '%')
        </if>
    </select>


    <!-- [/order] 조건에 맞을 경우 예매하기 -->
    <insert id="selectSeat" parameterType="ReservationDto">
        <selectKey resultType="int" keyProperty="canReserve" order="BEFORE">
            SELECT CASE
                -- 첫 번째 조건 검사: fan_cd가 일치하는지 확인
                WHEN u.fan_cd != c.fan_cd THEN 1
                WHEN u.fan_id = '0' THEN 1

                -- 두 번째 조건 검사: 예약이 없거나 티켓 상태가 0 또는 1이 아닌지 확인
                WHEN EXISTS (
                    SELECT 1
                    FROM CNCR_TICKET_M t
                    WHERE t.customer_id = #{userId}
                        AND t.concert_id = #{concertId}
                        AND (t.ticket_status_cd = 0 OR t.ticket_status_cd = 1)
                ) THEN 2

                -- 세 번째 조건 검사: 현재 시간이 콘서트 시작 시간과 같거나 이후, 취소 시간보다는 이전인지 확인
                WHEN NOW() &gt;= c.cncr_start_dtm AND NOW() &lt;= c.cncr_cancel_date THEN 3

                -- 모든 조건이 만족하는 경우
                ELSE 0
            END
            FROM TCK_USER_M u
            JOIN TCK_CONCERT_M c ON u.user_id = #{userId} AND c.concert_id = #{concertId}
        </selectKey>
        <if test="canReserve == 0">
            INSERT INTO CNCR_TICKET_M (customer_id, concert_id, grade_id, ticket_price, ticket_status_cd,
                seat_no,
                hall_id,
                pay_dtm)
            VALUES (#{userId}, #{concertId}, #{gradeId},#{price}, 0,
                (SELECT MIN(a.seat_no + 1) AS next_available_seat
                    FROM (
                        SELECT seat_no
                        FROM CNCR_TICKET_M
                        WHERE concert_id = #{concertId} AND grade_id = #{gradeId}
                        UNION ALL
                        SELECT 0
                        UNION ALL
                        SELECT #{totalSeat}
                    ) AS a
                    LEFT JOIN CNCR_TICKET_M AS b ON a.seat_no + 1 = b.seat_no
                        AND b.concert_id = #{concertId}
                        AND b.grade_id = #{gradeId}
                    WHERE a.seat_no &lt; #{totalSeat} AND b.seat_no IS NULL
                    LIMIT 1
                ),
            (select hall_id from TCK_CONCERT_M where TCK_CONCERT_M.concert_id = #{concertId}),
            DATE_ADD(NOW(), INTERVAL 1 DAY))
        </if>
    </insert>

    <select id="selectTicketId" parameterType="Map" resultType="int">
        SELECT reservation_id
        FROM CNCR_TICKET_M
        WHERE customer_id = #{userId}
          AND concert_id = #{concertId}
          AND ticket_status_cd = 0;
    </select>

    <select id="checkOrder" parameterType="Map" resultType="int">
        SELECT CASE
                   -- 첫 번째 조건 검사: fan_cd가 일치하는지 확인
                   WHEN (SELECT fan_cd FROM TCK_USER_M WHERE user_id = #{userId}) !=
                        (SELECT fan_cd FROM TCK_CONCERT_M WHERE concert_id = #{concertId}) THEN 1
                   WHEN (SELECT fan_id FROM TCK_USER_M where user_id = #{userId}) = '0' THEN 1

                   -- 두 번째 조건 검사: 예약이 없거나 티켓 상태가 0 또는 1이 아닌지 확인
                   WHEN (SELECT COUNT(reservation_id)
                         FROM CNCR_TICKET_M
                         WHERE customer_id = #{userId}
                           AND concert_id = #{concertId}
                           AND (ticket_status_cd = 0 OR ticket_status_cd = 1)) > 0 THEN 2

                   -- 세 번째 조건 검사: 현재 시간이 콘서트 시작 시간과 취소 시간 사이인지 확인
                   WHEN NOW() &lt;= (SELECT cncr_start_dtm FROM TCK_CONCERT_M WHERE concert_id = #{concertId}) THEN 3
                   WHEN NOW() >= (SELECT cncr_cancel_date FROM TCK_CONCERT_M WHERE concert_id = #{concertId}) THEN 3

                   -- 모든 조건이 만족하는 경우
                   ELSE 0
                   END
    </select>


    <!-- [price] -->
    <select id="priceCheck">
            (select cncr_price from TCK_CONCERT_M where concert_id = #{concertId})
    </select>

</mapper>