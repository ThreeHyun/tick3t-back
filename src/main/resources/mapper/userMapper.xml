<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.fisa.tick3t.repository.UserRepository">

    <!-- 2.1 [/signup] 회원가입시 User 한명을 Insert -->
    <insert id="insertUser" parameterType="UserDto">
        INSERT INTO TCK_USER_M (user_name, user_birth, user_email, user_pwd, fan_cd)
        VALUES (#{name}, #{birth}, #{email}, #{userPwd}, #{fanCd})
    </insert>


    <!-- 2.1, 2.2, 2.4[/signup, /login, /reset-password] 회원가입시 / 로그인시 / 비밀번호 재발급시 이메일이 DB에 존재하는지 체크 -->
    <select id="checkEmail" parameterType="String" resultType="int">
        SELECT user_id
        from TCK_USER_M
        where user_email = #{userEmail}
    </select>


    <!-- 2.4 [/reset-password] 존재하는 유저인지 판단-->
    <select id="checkUser" parameterType="User" resultType="int">
        SELECT user_id
        FROM TCK_USER_M
        WHERE user_email = #{email} and user_name = #{name} and user_birth = #{birth}
    </select>

    <!-- 4.1 [/profile] 유저의 회원 내정보 조회 -->
    <!-- password는 null로 set, name과 email은 마스킹처리 후 반환-->
    <select id="selectProfile" parameterType="int" resultType="ProfileDto">
        SELECT user_name as name,
               user_email as email,
               user_birth as birth,
               user_pwd,
               fan_id
        from TCK_USER_M
        where user_id = #{userId}
    </select>

    <!-- 2.4, 4.2 [/reset-password, /profile/password] 비밀번호 업데이트 -->
    <update id="updatePassword" parameterType="PasswordDto">
        UPDATE TCK_USER_M
        SET user_pwd = #{newPassword}
        WHERE user_id = #{userId}
    </update>

    <!-- 4.3 [/profile/fanId] 팬클럽 인증번호 인증을 위해 팬클럽 인증번호가 DB에 존재하는지 체크-->
    <select id="checkFanId" parameterType="String" resultType="int">
        SELECT user_id
        from TCK_USER_M
        where fan_id = #{fanId}
    </select>

    <!-- 4.3 [/profile/fanId] 팬클럽 인증 번호 업데이트 -->
    <update id="updateFanId" parameterType="userDto">
        UPDATE TCK_USER_M
        SET fan_id = #{fanId}
        WHERE user_id = #{userId}
    </update>

    <!-- 4.4 [/profile/withdraw] 회원 탈퇴 처리 -->
    <update id="withdraw" parameterType="int">
        UPDATE TCK_USER_M
        SET user_status_cd = 'D'
        WHERE user_id = #{userId}
    </update>


    <!-- 5.1 [/admin/user] 어드민이 사용자 전체조회 혹은 카테고리로 검색 조회할 때 사용 -->
    <select id="selectUsers" parameterType="QueryStringDto" resultType="UserDto">
        <choose>
            <when test="category == null">
                SELECT user_id, user_name as name, user_email as email, fan_cd, user_status_cd as statusCd, create_dtm as createDate
                FROM TCK_USER_M
                LIMIT 20 OFFSET #{offset}
            </when>
            <otherwise>
                <if test="category != null and category == 'name'">
                    SELECT user_id, user_name as name, user_email as email, fan_cd, user_status_cd as statusCd, create_dtm as createDate
                    FROM TCK_USER_M
                    WHERE user_name LIKE CONCAT('%',#{word}, '%')
                    LIMIT 20 OFFSET #{offset}
                </if>
                <if test="category != null and category == 'email'">
                    SELECT user_id, user_name as name, user_email as email, fan_cd, user_status_cd as statusCd, create_dtm as createDate
                    FROM TCK_USER_M
                    WHERE user_email LIKE CONCAT('%',#{word}, '%')
                    LIMIT 20 OFFSET #{offset}
                </if>
                <if test="category != null and category == 'fanCd'">
                    SELECT user_id, user_name as name, user_email as email, fan_cd, user_status_cd as statusCd, create_dtm as createDate
                    FROM TCK_USER_M
                    WHERE fan_cd LIKE CONCAT('%',#{word}, '%')
                    LIMIT 20 OFFSET #{offset}
                </if>
            </otherwise>
        </choose>
    </select>

    <select id="selectUserNum" resultType="int">
        SELECT count(*) as totalElement
        FROM TCK_USER_M
    </select>


    <!-- 5.2  [/admin/user/{id} 어드민이 유저 정보를 ID로 하나 선택하는 쿼리 -->
    <!-- pwd와 role은 null로 set하고 name과 email은 masking처리 후 반환-->
    <select id="selectUser" parameterType="int" resultType="UserDto">
        SELECT user_id,
               user_name as name,
               user_email as email,
               user_pwd,
               user_birth as birth,
               fan_id,
               fan_cd,
               user_status_cd as statusCd,
               create_dtm as createDate,
               role
        from TCK_USER_M
        where user_id = #{userId}
    </select>


    <!-- 5.4 [admin/fan/{fancd}] 가입, 탈퇴, 1주일 내에 가입한 팬덤별 인원 조회(ㅑㅜ-->
    <select id="selectFanSum" parameterType="String" resultType="FanCountDto">
        SELECT
            COUNT(*) AS joinUser,
            SUM(CASE WHEN user_status_cd = 'D' THEN 1 ELSE 0 END) AS withdrawUser,
            SUM(CASE WHEN create_dtm >= DATE_SUB(NOW(), INTERVAL 1 WEEK) THEN 1 ELSE 0 END) AS weekUser
        FROM TCK_USER_M
        WHERE fan_cd = #{fanCd}
    </select>
</mapper>


    <!--  [/admin/fanCd/{fanCd} 어드민이 팬덤 정보를 조회하는 쿼리 -->
    <!--    <select id="selectFanJoin" parameterType="String" resultType="java.lang.Integer">-->
    <!--        SELECT COUNT(*)-->
    <!--        FROM TCK_USER_M-->
    <!--        WHERE fan_cd = #{fanCd}-->
    <!--    </select>-->
    <!--    <select id="selectFanWithdraw" parameterType="String" resultType="java.lang.Integer">-->
    <!--        SELECT COUNT(*)-->
    <!--        FROM TCK_USER_M-->
    <!--        WHERE fan_cd = #{fanCd}-->
    <!--        AND user_status_cd = 'D'-->
    <!--    </select>-->
    <!--    <select id="selectFanWeek" parameterType="String" resultType="java.lang.Integer">-->
    <!--        SELECT COUNT(*)-->
    <!--        FROM TCK_USER_M-->
    <!--        WHERE fan_cd = #{fanCd}-->
    <!--        AND create_dtm >= DATE_SUB(NOW(), INTERVAL 1 WEEK);-->
    <!--    </select>-->

